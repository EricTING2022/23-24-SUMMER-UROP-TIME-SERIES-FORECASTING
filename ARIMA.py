# -*- coding: utf-8 -*-
"""Untitled23.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qMj2962DidNpM97yAkHqs7Cr8tCu8rYt
"""

!pip install sktime
!pip install pmdarima

import statsmodels.api as sm
import sktime
from pmdarima import auto_arima
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.dates import DateFormatter
from sklearn.metrics import mean_absolute_percentage_error as mape
import yfinance as yf

"""# 新增區段"""

financial_large_stocks = ['WFC','PNC','BAC','C','JPM']
financial_mid_stocks = ['TRV', 'ALL', 'HBAN', 'LNC', 'RF']
financial_small_stocks = ['UMBF', 'HFWA', 'SBSI', 'THFF', 'RNST']

tech_large_stocks = ['MSFT', 'AAPL', 'IBM', 'CSCO', 'INTC']
tech_mid_stocks = ['MANH', 'NVDA', 'SWKS', 'CGNX', 'BLKB']
tech_small_stocks = ['PLAB', 'TSRI', 'CAMP', 'ASUR', 'DMRC']

medic_large_stocks = ['JNJ', 'PFE', 'MRK', 'ABT', 'LLY']
medic_mid_stocks = ['DXCM', 'HOLX', 'PDCO', 'ALGN', 'TECH']
medic_small_stocks = ['OMI', 'VIVE', 'OGEN', 'CLDX', 'ANGO']

utility_large_stocks = ['NEE', 'DUK', 'SO', 'D', 'EXC']
utility_mid_stocks = ['AWK', 'WEC', 'PNM', 'NWE', 'OGE']
utility_small_stocks = ['MGEE', 'NWN', 'CWCO', 'ARTNA', 'RGCO']

food_large_stocks = ['PEP', 'KO', 'PG', 'MDLZ', 'GIS']
food_mid_stocks = ['BGS', 'FLO', 'JBSS', 'TSN', 'THS']
food_small_stocks = ['FARM', 'PRMW', 'WINA', 'CALM', 'UNFI']

data = yf.download(utility_large_stocks, start='2010-1-1', end='2020-1-1',group_by = 'tickers')
data_close = []
for i in data:
  if i[1] == 'Close':
    data_close.append(data[i])
print(data_close)
financial_large_stocks_current_MAPE = []
financial_large_stocks_past_MAPE = []

def gpt_get_aic(stocks):
    num_rows = 2
    num_cols = 5
    fig, axes = plt.subplots(num_rows, num_cols, figsize=(20, 10))
    axes = axes.flatten()

    for i, stock in enumerate(stocks):
        if i >= num_rows * num_cols:
            break

        n = len(stock)
        cut = n // 2
        past = stock[:cut]
        current = stock[cut:]
        past_train = past[:-30]
        past_test = past[-30:]
        current_train = current[:-30]
        current_test = current[-30:]

        past_model = auto_arima(past_train, suppress_warnings=True)
        current_model = auto_arima(current_train, suppress_warnings=True)

        p1, d1, q1 = past_model.order
        p2, d2, q2 = current_model.order

        past_prediction = []
        for j in range(cut - 30, cut):
            past_model = sm.tsa.ARIMA(stock[:j], order=(p1, d1, q1)).fit()
            forecast = past_model.get_forecast(1)
            past_prediction.append(forecast.predicted_mean)
        past_MAPE = mape(past_test, past_prediction)
        financial_large_stocks_past_MAPE.append(past_MAPE)

        current_prediction = []
        for j in range(n-30, n):
            current_model = sm.tsa.ARIMA(stock[:j], order=(p2, d2, q2)).fit()
            forecast = current_model.get_forecast(1)
            current_prediction.append(forecast.predicted_mean)
        current_MAPE = mape(current_test, current_prediction)
        financial_large_stocks_current_MAPE.append(current_MAPE)

        axes[i].plot(past_test.index, past_test, label='Actual (Past)')
        axes[i].plot(past_test.index, past_prediction, label='Predicted (Past)')
        axes[i].set_title(f'Actual vs. Predicted (Past) - Stock {stock.name[0]}')
        axes[i].set_xlabel('Date')
        axes[i].set_ylabel('Stock Price')
        axes[i].set_xticks(past_test.index[::5], past_test.index[::5].strftime('%Y-%m-%d'), rotation=45)
        axes[i].legend()

        axes[i + num_cols].plot(current_test.index, current_test, label='Actual (Current)')
        axes[i + num_cols].plot(current_test.index, current_prediction, label='Predicted (Current)')
        axes[i + num_cols].set_title(f'Actual vs. Predicted (Current) - Stock {stock.name[0]}')
        axes[i + num_cols].set_xlabel('Date')
        axes[i + num_cols].set_ylabel('Stock Price')
        axes[i + num_cols].set_xticks(current_test.index[::5], current_test.index[::5].strftime('%Y-%m-%d'), rotation=45)
        axes[i + num_cols].legend()

    plt.tight_layout()
    plt.show()

def get_aic(stocks):
  for stock in data_close:
    #separate the dataset into year2010-2015 and training and test set
    n = len(stock)
    cut = n//2
    past = stock[:cut]
    current = stock[cut:]
    past_train = past[:-30]
    past_test = past[-30:]
    current_train = current[:-30]
    current_test = current[-30:]

    #train a arima model for past five years
    past_model = auto_arima(past_train,suppress_warnings=True)
    current_model = auto_arima(current_train,suppress_warnings=True)

    #get arima parameter
    p1 = past_model.order[0]
    d1 = past_model.order[1]
    q1 = past_model.order[2]
    p2 = current_model.order[0]
    d2 = current_model.order[1]
    q2 = current_model.order[2]

    #use model to make prediction
    past_prediction = []
    for i in range(cut-30,cut):
      past_model = sm.tsa.ARIMA(stock[:i],order=(p1,d1,q1)).fit()
      forecast = past_model.get_forecast(1)
      past_prediction.append(forecast.predicted_mean)

    current_prediction = []
    for i in range(n-31,n-1):
      current_model = sm.tsa.ARIMA(stock[:i],order=(p2,d2,q2)).fit()
      forecast = current_model.get_forecast(1)
      current_prediction.append(forecast.predicted_mean)

    #record MAPE


    #draw graph
    plt.figure(figsize=(12, 8))
    plt.subplot(2, 1, 1)
    plt.plot(past_test.index, past_test, label='Actual (Past)')
    plt.plot(past_test.index, past_prediction, label='Predicted (Past)')
    plt.title('Actual vs. Predicted (Past)')
    plt.xlabel('Date')
    plt.ylabel('Stock Price')
    plt.xticks(past_test.index[::5],past_test.index[::5].strftime('%Y-%m-%d'))
    plt.legend()

    plt.subplot(2, 1, 2)
    plt.plot(current_test.index, current_test, label='Actual (Current)')
    plt.plot(current_test.index, current_prediction, label='Predicted (Current)')
    plt.title('Actual vs. Predicted (Current)')
    plt.xlabel('Date')
    plt.ylabel('Stock Price')
    plt.xticks(current_test.index[::5],current_test.index[::5].strftime('%Y-%m-%d'))
    plt.legend()

    plt.show()

gpt_get_aic(data_close)
print(financial_large_stocks_past_MAPE)
print(financial_large_stocks_current_MAPE)

from scipy import stats

ARIMA_mape_past = [0.007390125,0.008046939,0.008985943,0.009729,0.008761937,0.004121186,0.006031796,0.009128261,0.011803686,0.009948119,0.010415223,0.014875533,0.012325513,0.009465176,0.012201695,
        0.010470612,0.012288746,0.008458191,0.007395401,0.011517998,0.014617963,0.010166268,0.015690777,0.011111256,0.01237832,0.012925174,0.015928311,0.031670255,0.020409052,0.021040406,
        0.007786592,0.007618361,0.009399645,0.008392498,0.010659853,0.016477701,0.007843711,0.006412356,0.008461178,0.008454265,0.028008458,0.116903915,0.059286409,0.007522964,0.010626932,
        0.011542652,0.008763882,0.008683153,0.009268521,0.007079693,0.008503512,0.008516958,0.009419832,0.010660038,0.011765169,0.022778953,0.008884248,0.011616879,0.010057127,0.009550224,
        0.007182469,0.009103931,0.006289458,0.008111433,0.006916204,0.15938611,0.107917242,0.015,0.12742139,0.010766695,0.017978854,0.012244092,0.008693678,0.020748316,0.009016658]

ARIMA_mape_current = [0.00765908,0.005262039,0.00629868,0.007126055,0.005928246,0.004467118,0.005530729,0.006627067,0.0098309,0.007612946,0.005872851,0.007731957,0.007181354,0.005154837,0.007552597,
        0.005169178,0.008548912,0.005202471,0.007841397,0.007318225,0.012203799,0.007625009,0.010249765,0.01332023,0.014026638,0.024950507,0.054591824,0.020613702,
        0.023567331,0.009599872,0.00428772,0.006810105,0.004788983,0.00597383,0.007045577,0.015195645,0.007756952,0.017841685,0.008655994,0.009592453,0.023265711,0.122202136,
        0.040265204,0.03380193,0.010127762,0.005962504,0.004703674,0.005089942,0.005705145,0.006815338,0.00569192,0.005322825,0.006131063,0.005383187,0.005871261,0.006344847,
        0.012148328,0.008325103,0.007430049,0.006317018,0.004454322,0.004638297,0.005790745,0.006171595,0.007676248,0.155641804,0.005833221,0.0072809,0.008274455,0.010111997,
        0.020368907,0.008198931,0.006095716,0.007871368,0.037049313]

ARIMA_past_mape_average = (sum(ARIMA_mape_past)/len(ARIMA_mape_past))
ARIMA_current_mape_average = (sum(ARIMA_mape_current)/len(ARIMA_mape_current))
print('ARIMA_past_mape_average : ',ARIMA_past_mape_average)
print('ARIMA_current_mape_average : ',ARIMA_current_mape_average)

ARIMA_current_past_t_stat = stats.ttest_ind(ARIMA_mape_current, ARIMA_mape_past)
print(ARIMA_current_past_t_stat)

ARIMA_mape_financial = [0.007390125,0.008046939,0.008985943,0.009729,0.008761937,0.004121186,0.006031796,0.009128261,0.011803686,0.009948119,0.010415223,0.014875533,0.012325513,0.009465176,0.012201695,
            0.00765908,0.005262039,0.00629868,0.007126055,0.005928246,0.004467118,0.005530729,0.006627067,0.0098309,0.007612946,0.005872851,0.007731957,0.007181354,0.005154837,0.007552597]
ARIMA_mape_tech = [0.010470612,0.012288746,0.008458191,0.007395401,0.011517998,0.014617963,0.010166268,0.015690777,0.011111256,0.01237832,0.012925174,0.015928311,0.031670255,0.020409052,0.021040406,
          0.005169178,0.008548912,0.005202471,0.007841397,0.007318225,0.012203799,0.007625009,0.010249765,0.01332023,0.014026638,0.024950507,0.054591824,0.020613702,0.023567331,0.009599872]
ARIMA_mape_medic = [0.007786592,0.007618361,0.009399645,0.008392498,0.010659853,0.016477701,0.007843711,0.006412356,0.008461178,0.008454265,0.028008458,0.116903915,0.059286409,0.007522964,0.010626932,
          0.00428772,0.006810105,0.004788983,0.00597383,0.007045577,0.015195645,0.007756952,0.017841685,0.008655994,0.009592453,0.023265711,0.122202136,0.040265204,0.03380193,0.010127762]
ARIMA_mape_utility = [0.011542652,0.008763882,0.008683153,0.009268521,0.007079693,0.008503512,0.008516958,0.009419832,0.010660038,0.011765169,0.022778953,0.008884248,0.011616879,0.010057127,0.009550224,
            0.005962504,0.004703674,0.005089942,0.005705145,0.006815338,0.00569192,0.005322825,0.006131063,0.005383187,0.005871261,0.006344847,0.012148328,0.008325103,0.007430049,0.006317018]
ARIMA_mape_food = [0.007182469,0.009103931,0.006289458,0.008111433,0.006916204,0.15938611,0.107917242,0.015,0.12742139,0.010766695,0.017978854,0.012244092,0.008693678,0.020748316,0.009016658,0.004454322,
          0.004638297,0.005790745,0.006171595,0.007676248,0.155641804,0.005833221,0.0072809,0.008274455,0.010111997,0.020368907,0.008198931,0.006095716,0.007871368,0.037049313]
print('ARIMA_mape_financial_average: ',sum(ARIMA_mape_financial)/30)
print('ARIMA_mape_tech_average: ',sum(ARIMA_mape_tech)/30)
print('ARIMA_mape_medic_average: ',sum(ARIMA_mape_medic)/30)
print('ARIMA_mape_utility_average: ',sum(ARIMA_mape_utility)/30)
print('ARIMA_mape_food_average: ',sum(ARIMA_mape_food)/30)

ARIMA_industry_f_stat = stats.f_oneway(ARIMA_mape_financial,ARIMA_mape_tech,ARIMA_mape_medic,ARIMA_mape_utility,ARIMA_mape_food)
print(ARIMA_industry_f_stat)

ARIMA_large_marketcap = [0.007390125,0.008046939,0.008985943,0.009729,0.008761937,0.00765908,0.005262039,0.00629868,0.007126055,0.005928246,0.010470612,0.012288746,0.008458191,0.007395401,0.011517998,0.005169178,
              0.008548912,0.005202471,0.007841397,0.007318225,0.007786592,0.007618361,0.009399645,0.008392498,0.010659853,0.00428772,0.006810105,0.004788983,0.00597383,0.007045577,
              0.011542652,0.008763882,0.008683153,0.009268521,0.007079693,0.005962504,0.004703674,0.005089942,0.005705145,0.006815338,0.007182469,0.009103931,0.006289458,0.008111433,
              0.006916204,0.004454322,0.004638297,0.005790745,0.006171595,0.007676248]
ARIMA_mid_marketcap = [0.004121186,0.006031796,0.009128261,0.011803686,0.009948119,0.004467118,0.005530729,0.006627067,0.0098309,0.007612946,0.014617963,0.010166268,0.015690777,0.011111256,0.01237832,0.012203799,
            0.007625009,0.010249765,0.01332023,0.014026638,0.016477701,0.007843711,0.006412356,0.008461178,0.008454265,0.015195645,0.007756952,0.017841685,0.008655994,0.009592453,
            0.008503512,0.008516958,0.009419832,0.010660038,0.011765169,0.00569192,0.005322825,0.006131063,0.005383187,0.005871261,0.15938611,0.107917242,0.015,0.12742139,0.010766695,
            0.155641804,0.005833221,0.0072809,0.008274455,0.010111997]
ARIMA_small_marketcap = [0.010415223,0.014875533,0.012325513,0.009465176,0.012201695,0.005872851,0.007731957,0.007181354,0.005154837,0.007552597,0.012925174,0.015928311,0.031670255,0.020409052,0.021040406,0.024950507,
              0.054591824,0.020613702,0.023567331,0.009599872,0.028008458,0.116903915,0.059286409,0.007522964,0.010626932,0.023265711,0.122202136,0.040265204,0.03380193,0.010127762,
              0.022778953,0.008884248,0.011616879,0.010057127,0.009550224,0.006344847,0.012148328,0.008325103,0.007430049,0.006317018,0.017978854,0.012244092,0.008693678,0.020748316,
              0.009016658,0.020368907,0.008198931,0.006095716,0.007871368,0.037049313]

print('ARIMA_large_marketcap: ',sum(ARIMA_large_marketcap)/25)
print('ARIMA_mid_marketcap: ',sum(ARIMA_mid_marketcap)/25)
print('ARIMA_small_marketcap: ',sum(ARIMA_small_marketcap)/25)

ARIMA_marketcap_f_test= stats.f_oneway(ARIMA_large_marketcap,ARIMA_mid_marketcap,ARIMA_small_marketcap)
print(ARIMA_marketcap_f_test)

LSTM = [0.0048483,0.0104681,0.0117797,0.015791,0.0116154,0.0118202,0.0078844,0.0063776,0.0186037,0.0086101,0.0118695,0.0168621,0.0124203,0.0159529,0.0074305,0.018202,0.0175026,0.0087417,0.0102433,
        0.0198234,0.0120211,0.01792,0.0131731,0.012016,0.012116,0.0099549,0.0263761,0.0109429,0.0223821,0.0423278,0.0074327,0.0065595,0.0105536,0.0144238,0.0148852,0.0171626,0.0111431,0.0091998,
        0.0091812,0.0126174,0.0273661,0.145763,0.1377014,0.0311269,0.0198539,0.0092017,0.0060854,0.0064342,0.0044768,0.0132005,0.0091423,0.007547,0.0083446,0.0058562,0.0099374,0.0108706,0.020438,
        0.015086,0.0199858,0.0159491,0.0061075,0.0111727,0.007396,0.0119097,0.0138779,0.0136331,0.0125268,0.011785,0.011236,0.0123117,0.01231,0.0191932,0.0063883,0.016091,0.0107722,0.0112681,
        0.0085846,0.0086159,0.0151851,0.005748,0.008712,0.0089012,0.0087741,0.0113543,0.0077526,0.008131,0.0085776,0.0079829,0.0069179,0.0052345,0.0197357,0.0163432,0.0072427,0.0083734,0.0182175,
        0.0131746,0.0123047,0.0163113,0.0136088,0.0101964,0.0314204,0.057969,0.0252081,0.0118878,0.022951,0.0048647,0.0080246,0.0108376,0.0124837,0.0155497,0.0159772,0.0104681,0.0184394,0.0098826,
        0.0114599,0.0360792,0.1237428,0.0699833,0.2562005,0.0101813,0.0063953,0.0056658,0.0068972,0.004644,0.0069872,0.008051,0.0059845,0.0055323,0.0063924,0.0059923,0.0096516,0.0086325,0.0084462,
        0.0161802,0.0124859,0.0041503,0.0114873,0.0055008,0.00666,0.0120187,0.0215088,0.0122653,0.0071335,0.0097641,0.0111843,0.0220341,0.009029,0.0062982,0.007989,0.0373045]
ARIMA = [0.010415223,0.014875533,0.012325513,0.009465176,0.012201695,0.005872851,0.007731957,0.007181354,0.005154837,0.007552597,0.012925174,0.015928311,0.031670255,0.020409052,0.021040406,0.024950507,
         0.054591824,0.020613702,0.023567331,0.009599872,0.028008458,0.116903915,0.059286409,0.007522964,0.010626932,0.023265711,0.122202136,0.040265204,0.03380193,0.010127762,0.022778953,0.008884248,
         0.011616879,0.010057127,0.009550224,0.006344847,0.012148328,0.008325103,0.007430049,0.006317018,0.017978854,0.012244092,0.008693678,0.020748316,0.009016658,0.020368907,0.008198931,
         0.006095716,0.007871368,0.037049313,0.004121186,0.006031796,0.009128261,0.011803686,0.009948119,0.004467118,0.005530729,0.006627067,0.0098309,0.007612946,0.014617963,0.010166268,0.015690777,
         0.011111256,0.01237832,0.012203799,0.007625009,0.010249765,0.01332023,0.014026638,0.016477701,0.007843711,0.006412356,0.008461178,0.008454265,0.015195645,0.007756952,0.017841685,0.008655994,
         0.009592453,0.008503512,0.008516958,0.009419832,0.010660038,0.011765169,0.00569192,0.005322825,0.006131063,0.005383187,0.005871261,0.15938611,0.107917242,0.015,0.12742139,0.010766695,0.155641804,
         0.005833221,0.0072809,0.008274455,0.010111997,0.007390125,0.008046939,0.008985943,0.009729,0.008761937,0.00765908,0.005262039,0.00629868,0.007126055,0.005928246,0.010470612,0.012288746,0.008458191,
         0.007395401,0.011517998,0.005169178,0.008548912,0.005202471,0.007841397,0.007318225,0.007786592,0.007618361,0.009399645,0.008392498,0.010659853,0.00428772,0.006810105,0.004788983,0.00597383,0.007045577,
         0.011542652,0.008763882,0.008683153,0.009268521,0.007079693,0.005962504,0.004703674,0.005089942,0.005705145,0.006815338,0.007182469,0.009103931,0.006289458,0.008111433,0.006916204,0.004454322,0.004638297,
         0.005790745,0.006171595,0.007676248]
ARIMA_LSTM_mape_t_test = stats.ttest_ind(ARIMA, LSTM)
print('ARIMA_average_mape: ',sum(ARIMA)/len(ARIMA))
print('LSTM_average_mape :',sum(LSTM)/len(LSTM))
print('ARIMA_LSTM_mape_t_test: ',ARIMA_LSTM_mape_t_test)